import tkinter as tk
import subprocess
import sys

class SquareApp:
    def __init__(self, root):
        self.root = root
        self.variables = [0] * 66  # Инициализация переменных для каждой кнопки
        self.buttons = []
        self.total_label = tk.Label(root, text="Total: 0")  # Метка для отображения суммы
        self.total_label.grid(row=0, columnspan=66)  # Размещаем метку вверху

        # Создание кнопки Check
        check_button = tk.Button(root, text='Check', command=self.calculate_sum)
        check_button.grid(row=1, columnspan=14)  # Размещаем кнопку Check выше квадратиков

        # Создание кнопки Save
        save_button = tk.Button(root, text='Save', command=self.save_sum)
        save_button.grid(row=1, column=14, columnspan=14)  # Размещаем кнопку Save рядом с Check

        # Создание ряда кнопок для ввода
        for i in range(66):
            value = 2 ** (0 + i)
            button = tk.Button(root, text=f'{i+0}', width=2, height=1, bg='white',
                               command=lambda i=i, value=value: self.on_button_press(i, value))
            button.grid(row=2, column=i)  # Располагаем во втором ряду
            self.buttons.append(button)

        # Добавление первого визуального ряда квадратиков
        self.add_visual_row(root, "11100110000101100100110110100000101011001000110100011100000101011", 3)

        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00101011010010001000100100001101111001001111100010100000111011110", 4)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00010000000101101111001100110101101111110111101001110011001111100", 5)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01110111110101011000100001101101011110000010101010111100011011000", 6)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01100000100100100110111101000010111011000101011010010011110010000", 7)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01111101110111100110110010100100000110000101111000000011111100000", 8)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11110010001011010101001111100001110111010011011010010010111000000", 9)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10000100010110010001100001001010000111011010111001100011010000000", 10)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00111000011010111010100111100000100100111010010011010111100000000", 11)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11111011111111110010001101011100011011010001100010111001000000000", 12)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00101000100001111110011011011001111110000111110101010110000000000", 13)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11000010111110001011010110101011011011011111011011000100000000000", 14)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00110110010011000111111000100111000100011110000000011000000000000", 15)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00111100011110011101001100100110100001110101111101110000000000000", 16)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00101011100100000000010110000101000011100000101011100000000000000", 17)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00101010110010010111010000111100001010111101010001000000000000000", 18)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10110010111110101000000011010110111010000010111010000000000000000", 19)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11011001110111000111001111101011011001111011010100000000000000000", 20)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01011101001111001010110100001000011010110011011000000000000000000", 21)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00100010101010110001000111000001100000110111010000000000000000000", 22)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10100000001111000010100001010011111101000100100000000000000000000", 23)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11110001101011000101101011001101010000000111000000000000000000000", 24)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10001001101000111110010011011100101111010110000000000000000000000", 25)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11110001101100011010001110000100010001010100000000000000000000000", 26)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11011010001100110101100101100001110010101000000000000000000000000", 27)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01101011110011001001001001110101100101110000000000000000000000000", 28)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10010111110000001100000111111010110100100000000000000000000000000", 29)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00001011001101011111010000011100010001000000000000000000000000000", 30)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11001001010101101010111011101010111010000000000000000000000000000", 31)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00111110010100000100000101111011100100000000000000000000000000000", 32)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00001110100010000100101101110101001000000000000000000000000000000", 33)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10111000100010011010011001010010110000000000000000000000000000000", 34)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00011011000101010011011010010101100000000000000000000000000000000", 35)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01110100011001010100011000011101000000000000000000000000000000000", 36)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11100010111001111111001010111110000000000000000000000000000000000", 37)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00100110101100110010100110111100000000000000000000000000000000000", 38)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01111000101010100100011111101000000000000000000000000000000000000", 39)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00010111001101101000100110110000000000000000000000000000000000000", 40)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10101110000111000011010101100000000000000000000000000000000000000", 41)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01110110010011000000001011000000000000000000000000000000000000000", 42)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10100111011110100101111110000000000000000000000000000000000000000", 43)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00100000010101000011101100000000000000000000000000000000000000000", 44)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "01001010011101101010101000000000000000000000000000000000000000000", 45)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11110000001001111011010000000000000000000000000000000000000000000", 46)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "00101100101001011101100000000000000000000000000000000000000000000", 47)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10101010001101001011000000000000000000000000000000000000000000000", 48)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "11111001001011101010000000000000000000000000000000000000000000000", 49)
        
        # Добавление второго визуального ряда квадратиков
        self.add_visual_row(root, "10110000000100001100000000000000000000000000000000000000000000000", 50)

        
       

    def add_visual_row(self, root, pattern, row):
        
        for i, bit in enumerate(pattern):
            color = 'black' if bit == '1' else 'white'
            #label = tk.Label(root, bg=color, width=3, height=1, borderwidth=1, relief="raised")
            label = tk.Label(root, bg=color, width=3, height=1)
            label.grid(row=row, column=i)  # Указываем ряд для размещения

    def on_button_press(self, index, value):
        if self.variables[index] == 0:
            self.variables[index] = value
            self.buttons[index].config(bg='black')
        else:
            self.variables[index] = 0
            self.buttons[index].config(bg='SystemButtonFace')

    def calculate_sum(self):
        total = sum(self.variables) + 36893488147419103232
        self.total_label.config(text=f"Total: {total}")  # Обновляем текст метки с суммой
        print(f"Total sum of selected values: {total}")

        hexadecimal_representation = hex(total)[2:]
        command = f"KeyHunt-Cuda.exe -t 0 -g --gpui 0 --gpux 256,256 -m address --coin BTC --range {hexadecimal_representation}:+2000000000 13zb1hQbWVsc2S7ZTZnP2G4undNNpdh5so"

        # Запускаем в новом окне
        self.run_in_new_window(command)

    def run_in_new_window(self, command):
        if sys.platform == "win32":
            subprocess.run(command, creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            try:
                subprocess.run(f"xterm -e '{command}'", shell=True)
            except Exception as e:
                print(f"Ошибка при запуске в терминале: {e}")
                
    def save_sum(self):
        # Сохраняем текущую сумму в файл
        total = sum(self.variables)
        with open('keys.txt', 'a') as file:  # Открываем файл для добавления
            file.write(f"{total}\n")  # Записываем сумму с новой строки
        print(f"Saved total: {total} to keys.txt")  # Выводим сообщение в консоль

if __name__ == "__main__":
    root = tk.Tk()
    app = SquareApp(root)
    root.mainloop()
